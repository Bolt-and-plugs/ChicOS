#ifndef _CPU
#define _CPU

#include "../../defines.h"
#include "../io/file.h"
#include "../process/process.h"
#include "../scheduler/scheduler.h"
#include "../semaphore/semaphore.h"

#define TIME_SLICE 1000
#define MAX_TIME_MORE_PAGES 1000

typedef enum {
  process_interrupt = 1, // interrupt generated by the execution of the processCreate function and by the end of I/O operations
  process_create = 2,    // call to start the creation of a process in the PCB *
  process_kill = 3,      // call to terminate the existence of a process in the PCB *
  disk_request = 4,      // I/O operation call for the disk
  disk_finish = 5,       // signal for the end of I/O for the disk
  mem_load_req = 6,      // memory load operation call
  mem_load_finish = 7,   // signal for the end of loading
  semaphore_p = 10,      // handles process blocking
  semaphore_v = 11,      // handles process unblocking
  print_request = 14,    // I/O operation call for printing
  print_finish = 15,     // signal for the end of I/O for printing
  // fs_request = 8,     // call for a file system operation
  // fs_finish = 9,      // signal for the end of a file system operation
} events;


typedef struct __cpu {
  u64 quantum_time;
  pthread_t cpu_t;
  sem_t cpu_s;
} cpu;

void *init_cpu(void *arg);

void cpu_loop();

void sys_call(events e, const char *str, ...);

void interrupt_control(events e, const char *str, ...);

void exec_program(process *sint_process);

#endif
